function y = FastToeplitzVec(c,r,x)
% FASTTOEPLITZVEC  Fast application of Toeplitz matrix.
%   y = FASTTOEPLITZVEC(c,r,x) applies Toeplitz matrix generated by c been
%   the first column and r been the first row to vectors x. Here we denote
%   the length of c as n and the length of r as k. y returns the matrix
%   vector product y = Tx, where T is a Toeplitz matrix generated by c and
%   r, if n >= k, the corresponding Toeplitz matrix is defined as
%       -                                 -
%       |  c1     r2    ...   rk-1    rk  |
%       |  c2     c1    ...   rk-2   rk-1 |
%   T = |  c3     c2    ...   rk-3   rk-2 | ,
%       | ...    ...    ...   ...    ...  |
%       | cn-1   cn-2   ...  cn-k+1  cn-k |
%       |  cn    cn-1   ...  cn-k+2 cn-k+1|
%       -                                 -
%   if n < k, the corresponding Toeplitz matrix is defined as
%       -                                         -
%       |  c1     r2     r3    ...   rk-1    rk   |
%       |  c2     c1     r2    ...   rk-2   rk-1  |
%   T = | ...    ...    ...    ...   ...    ...   | .
%       | cn-1   cn-2   cn-3   ...  rk-n+1 rk-n+2 |
%       |  cn    cn-1   cn-2   ...   rk-n  rk-n+1 |
%       -                                         -
%   Ideally, c(1) should be equal to r(1). If that does not hold, the
%   function will warn the user and use r(1) as the value on the diagonal.
%
%   See also FASTCIRCULANTVEC, FASTHANKELVEC, FASTTOEPLITZSYMVEC.

%   Copyright (c) 2015 Yingzhou Li, Stanford University

n = size(c,1);
k = size(r,1);
if c(1) ~= r(1)
    warning(['First element of input column does not match first'...
             ' element of input row. Column wins anti-diagonal'...
             ' conflict.']);
end
cext = [flipud(r(2:k));c];
xext = [x;zeros(n-1,1)];
yext = ifft(fft(cext).*fft(xext));
y = yext(k:end);

end